"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var sorted_set_1 = require("./sorted_set");
var list_1 = require("./list");
describe('sorted_set', function () {
    it('removeAll', function () {
        var set = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        (0, sorted_set_1.removeAll)(set, []);
        assert.deepEqual(set, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        (0, sorted_set_1.removeAll)(set, [10]);
        assert.deepEqual(set, [1, 2, 3, 4, 5, 6, 7, 8, 9]);
        (0, sorted_set_1.removeAll)(set, [1, 2, 3]);
        assert.deepEqual(set, [4, 5, 6, 7, 8, 9]);
        (0, sorted_set_1.removeAll)(set, [5, 7]);
        assert.deepEqual(set, [4, 6, 8, 9]);
    });
    it('addAll', function () {
        var set = [1, 3, 5, 8];
        (0, sorted_set_1.addAll)(set, []);
        assert.deepEqual(set, [1, 3, 5, 8]);
        (0, sorted_set_1.addAll)(set, [10]);
        assert.deepEqual(set, [1, 3, 5, 8, 10]);
        (0, sorted_set_1.addAll)(set, [1, 2, 3]);
        assert.deepEqual(set, [1, 2, 3, 5, 8, 10]);
        (0, sorted_set_1.addAll)(set, [5, 7]);
        assert.deepEqual(set, [1, 2, 3, 5, 7, 8, 10]);
    });
    it('uniquify', function () {
        var set1 = [];
        (0, sorted_set_1.uniquify)(set1);
        assert.deepEqual(set1, []);
        var set2 = [1];
        (0, sorted_set_1.uniquify)(set2);
        assert.deepEqual(set2, [1]);
        var set3 = [1, 2];
        (0, sorted_set_1.uniquify)(set3);
        assert.deepEqual(set3, [1, 2]);
        var set4 = [1, 1];
        (0, sorted_set_1.uniquify)(set4);
        assert.deepEqual(set4, [1]);
        var set5 = [1, 1, 1];
        (0, sorted_set_1.uniquify)(set5);
        assert.deepEqual(set5, [1]);
        var set6 = [1, 2, 2];
        (0, sorted_set_1.uniquify)(set6);
        assert.deepEqual(set6, [1, 2]);
        var set7 = [1, 2, 3];
        (0, sorted_set_1.uniquify)(set7);
        assert.deepEqual(set7, [1, 2, 3]);
        var set8 = [1, 1, 2, 4, 4, 4, 5, 5, 7, 7, 8, 9, 10, 10, 10];
        (0, sorted_set_1.uniquify)(set8);
        assert.deepEqual(set8, [1, 2, 4, 5, 7, 8, 9, 10]);
    });
    // ----- NOTE: you may have to add imports to get these test to pass
    // ----- TODO (3d): - uncomment the tests for makeSortedNumberSet
    it('makeSortedNumberSet', function () {
        // TODO (4e): pass (1, 10) as the arguments to all calls to getNumbers
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([])).getNumbers(1, 10), (0, list_1.explode_array)([]));
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1])).getNumbers(1, 10), (0, list_1.explode_array)([1]));
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3])).getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3]));
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([3, 2, 1])).getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3]));
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 1, 2, 2, 3, 3])).getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3]));
        assert.deepEqual((0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 2, 49, 50, 50, 99, 100])).getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 49, 50, 99, 100]));
    });
    // ----- TODO (4f): - uncomment the tests for complement
    it('complement', function () {
        var set0 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([]));
        set0.complement();
        assert.deepEqual(set0.getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));
        var set1 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1]));
        set1.complement();
        assert.deepEqual(set1.getNumbers(1, 10), (0, list_1.explode_array)([2, 3, 4, 5, 6, 7, 8, 9, 10]));
        var set4 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([2, 4, 6, 8]));
        set4.complement();
        assert.deepEqual(set4.getNumbers(1, 10), (0, list_1.explode_array)([1, 3, 5, 7, 9, 10]));
    });
    // ----- TODO (5b): - uncomment the tests for removeAll - infinite sets
    it('removeAll - infinite', function () {
        var set = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([3, 4, 5, 6]));
        var set1 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set1.removeAll(set);
        assert.deepEqual(set1.getNumbers(1, 10), (0, list_1.explode_array)([1, 2]));
        var set2 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set2.complement();
        set2.removeAll(set);
        assert.deepEqual(set2.getNumbers(1, 10), (0, list_1.explode_array)([7, 8, 9, 10]));
        set.complement();
        var set3 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set3.removeAll(set);
        assert.deepEqual(set3.getNumbers(1, 10), (0, list_1.explode_array)([3, 4]));
        var set4 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set4.complement();
        set4.removeAll(set);
        assert.deepEqual(set4.getNumbers(1, 10), (0, list_1.explode_array)([5, 6]));
    });
    // ----- TODO (5d): - uncomment the tests for removeAll - infinite sets
    it('addAll - infinite', function () {
        var set = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([3, 4, 5, 6]));
        var set1 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set1.addAll(set);
        assert.deepEqual(set1.getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3, 4, 5, 6]));
        var set2 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set2.complement();
        set2.addAll(set);
        assert.deepEqual(set2.getNumbers(1, 10), (0, list_1.explode_array)([3, 4, 5, 6, 7, 8, 9, 10]));
        set.complement();
        var set3 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set3.addAll(set);
        assert.deepEqual(set3.getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 3, 4, 7, 8, 9, 10]));
        var set4 = (0, sorted_set_1.makeSortedNumberSet)((0, list_1.explode_array)([1, 2, 3, 4]));
        set4.complement();
        set4.addAll(set);
        assert.deepEqual(set4.getNumbers(1, 10), (0, list_1.explode_array)([1, 2, 5, 6, 7, 8, 9, 10]));
    });
});
//# sourceMappingURL=data:application/json;base64,